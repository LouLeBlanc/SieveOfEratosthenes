<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

	Written by Louis LeBlanc
	For Homework Assignment 4
	RSEG-126 - Release Control and Continuous Integration/Continuous Delivery
	Brandeis University,
	Instructed by Eric Hemdal

-->

<project basedir="." default="build" name="Sieve Of Eratosthenes">

	<description>
		Ant build file for SieveOfEratosthenes project.
	</description>

	<property name="junit.output.dir" value="junit"/>
	<property name="dist.output.dir" value="dist/lib"/>
	<property name="debuglevel" value="source,lines,vars"/>
	<property name="jarfile" value="SieveOfEratosthenes.jar"/>
	<property name="target" value="1.8"/>
	<property name="source" value="1.8"/>
	<property environment="env"/>

	<condition property="docker-available" value="true" else="false">
		<or>
			<!-- Check for Docker on Linux -->
			<available file="docker" type="file" filepath="env.PATH"/>
			<!-- Check for Docker on Windows !!NOT TESTED!! -->
			<available file="docker.exe" type="file" filepath="env.PATH"/>
			<available file="docker.exe" type="file" filepath="env.Path"/>
			<available file="docker.exe" type="file" filepath="env.path"/>
		</or>
	</condition>

	<!-- There's a dependency manager (Ivy) we should use for this -->
	<path id="JUnit 4.libraryclasspath">
		<pathelement location="lib/junit.jar"/>
		<pathelement location="lib/hamcrest-core.jar"/>
	</path>

	<path id="SieveOfEratosthenes.classpath">
		<pathelement location="bin"/>
		<path refid="JUnit 4.libraryclasspath"/>
	</path>

	<target name="init" description="Initialize build environment">
		<mkdir dir="bin"/>
		<mkdir dir="${dist.output.dir}"/>
		<mkdir dir="${junit.output.dir}"/>
	</target>

	<target name="clean"
		description="Remove build artifacts from the build environment">
		<echo message="Cleaning ${ant.project.name} build environment"/>
		<delete dir="bin"/>
		<delete dir="junit"/>
		<delete dir="dist"/>
	</target>

	<target depends="init" name="build" description="Build the Java classes">
		<echo message="Executing Build target for ${ant.project.name}"/>
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin"
			includeantruntime="false" source="${source}" target="${target}">
			<src path="src"/>
			<classpath refid="SieveOfEratosthenes.classpath"/>
		</javac>
	</target>

	<target name="dist" depends="junit" description="Build the distribution jar file">
		<echo message="Executing Distribution buid target for ${ant.project.name}"/>
		<jar destfile="${dist.output.dir}/${jarfile}" excludes="*Test.class" basedir="bin">
			<manifest>
				<attribute name="Main-Class"
					value="edu.brandeis.rseg126.SOE.SieveOfEratosthenes"/>
			</manifest>
		</jar>
	</target>

	<target name="junit" depends="build"
		description="Run JUnit tests">
		<echo message="Running JUnit tests for ${ant.project.name}"/>
		<junit printsummary="yes" haltonerror="yes" logfailedtests="true">
			<formatter type="xml"/>
			<classpath refid="SieveOfEratosthenes.classpath"/>
			<test name="SieveOfEratosthenesTest"
				methods="testGetUpperBound, testIsPrime"
				todir="${junit.output.dir}"/>
		</junit>
	</target>

	<target name="junitreport" depends="junit"
		description="Generate JUnit report in HTML format">
		<echo message="Generating JUnit tests for ${ant.project.name}"/>
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.output.dir}"/>
		</junitreport>
	</target>

	<target name="run" depends="dist"
		description="Run the jar file">
		<echo message="Running ${jarfile} with the default input (300)"/>
		<java jar="${dist.output.dir}/${jarfile}"
			inputstring="300"
			fork="true"
			failonerror="true">
			<classpath>
				<pathelement location="bin"/>
			</classpath>
		</java>
	</target>

	<target name="docker"
		depends="docker-installed, docker-not-installed"
		description="Wrapper task to build Docker if it is installed">
	</target>

	<target name="docker-not-installed"
		depends="dist"
		description="Display message if Docker is not installed"
		unless="docker-available">
		<echo message="Docker is not available."/>
		<echo message="Make sure Docker is properly installed and configured and try again."/>
	</target>

	<target name="docker-installed"
		depends="dist"
		description="Build Docker image if Docker is installed"
		if="docker-available">
		<echo message="Building docker file"/>
		<exec executable="docker">
			<arg value="build"/>
			<arg value="-t"/>
			<arg value="rseg126:sieveoferatosthenes"/>
			<arg value="."/>
		</exec>
	</target>
</project>
